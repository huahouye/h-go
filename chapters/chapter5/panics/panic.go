/*
Go的类型系统会在编译时捕获很多错误，但有些错误只能在运行时检查，如数组访问越界、
空指针引用等。这些运行时错误会引起painc异常。

一般而言，当panic异常发生时，程序会中断运行，并立即执行在该goroutine（可以先理解成
线程，在第8章会详细介绍）中被延迟的函数（defer 机制）

虽然Go的panic机制类似于其他语言的异常，但panic的适用场景有一些不同。由于panic会引
起程序的崩溃，因此panic一般用于严重错误，如程序内部的逻辑不一致。勤奋的程序员认为
任何崩溃都表明代码中存在漏洞，所以对于大部分漏洞，我们应该使用Go提供的错误机制，
而不是panic，尽量避免程序的崩溃。在健壮的程序中，任何可以预料到的错误，如不正确的
输入、错误的配置或是失败的I/O操作都应该被优雅的处理，最好的处理方式，就是使用Go的
错误机制。

将panic机制类比其他语言异常机制的读者可能会惊讶，runtime.Stack为何能输出已经被释放
函数的信息？在Go的panic机制中，延迟函数的调用在释放堆栈信息之前。
*/
package panics

import (
	"fmt"
)
