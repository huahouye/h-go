1、Go 语言同时提供了有符号和无符号类型的整数运算。这里有 int8、int16、int32 和 int64 四种截
然不同大小的有符号整形数类型，分别对应8、16、32、64 bit大小的有符号整形数，与此对
应的是 uint8、uint16、uint32 和 uint64 四种无符号整形数类型。

2、这里还有两种一般对应特定CPU平台机器字大小的有符号和无符号整数int和uint；其中int是应
用最广泛的数值类型。这两种类型都有同样的大小，32或64bit，但是我们不能对此做任何的
假设；因为不同的编译器即使在相同的硬件平台上可能产生不同的大小。

3、Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。这两个名称可
以互换使用。同样byte也是uint8类型的等价类型，byte类型一般用于强调数值是一个原始的数
据而不是一个小的整数。

4、下面是Go语言中关于算术运算、逻辑运算和比较运算的二元运算符，它们按照先级递减的顺
序的排列：
* / % << >> & &^
+ - | ^
== != < <= > >=
&&
||

5、算术运算符+、-、 *  和 /  可以适用与于整数、浮点数和复数，但是取模运算符%仅用于整数
间的运算。对于不同编程语言，%取模运算的行为可能并不相同。在Go语言中，%取模运算
符的符号和被取模数的符号总是一致的，因此 -5%3  和 -5%-3  结果都是-2。除法运算符 /  的
行为则依赖于操作数是否为全为整数，比如 5.0/4.0  的结果是1.25，但是5/4的结果是1，因为
整数除法会向着0方向截断余数。

6、Go语言还提供了以下的bit位操作运算符，前面4个操作运算符并不区分是有符号还是无符号
数：
& 位运算 AND
| 位运算 OR
^ 位运算 XOR
&^ 位清空 (AND NOT)
<< 左移
>> 右移






