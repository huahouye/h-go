1、UTF8是一个将Unicode码点编码为字节序列的变长编码。UTF8编码由Go语言之父Ken
Thompson和Rob Pike共同发明的，现在已经是Unicode的标准。UTF8编码使用1到4个字节
来表示每个Unicode码点，ASCII部分字符只使用1个字节，常用字符部分使用2或3个字节表
示。每个符号编码后第一个字节的高端bit位用于表示总共有多少编码个字节。如果第一个字
节的高端bit为0，则表示对应7bit的ASCII字符，ASCII字符每个字符依然是一个字节，和传统
的ASCII编码兼容。如果第一个字节的高端bit是110，则说明需要2个字节；后续的每个高端bit
都以10开头。更大的Unicode码点也是采用类似的策略处理。
0xxxxxxx runes 0-127 (ASCII)
110xxxxx 10xxxxxx 128-2047 (values <128 unused)
1110xxxx 10xxxxxx 10xxxxxx 2048-65535 (values <2048 unused)
11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 65536-0x10ffff (other values unused)

2、变长的编码无法直接通过索引来访问第n个字符，但是UTF8编码获得了很多额外的优点。首
先UTF8编码比较紧凑，完全兼容ASCII码，并且可以自动同步：它可以通过向前回朔最多2个
字节就能确定当前字符编码的开始字节的位置。它也是一个前缀编码，所以当从左向右解码
时不会有任何歧义也并不需要向前查看（译注：像GBK之类的编码，如果不知道起点位置则
可能会出现歧义）。没有任何字符的编码是其它字符编码的子串，或是其它编码序列的字
串，因此搜索一个字符时只要搜索它的字节编码序列即可，不用担心前后的上下文会对搜索
结果产生干扰。同时UTF8编码的顺序和Unicode码点的顺序一致，因此可以直接排序UTF8编
码序列。同时因为没有嵌入的NUL(0)字节，可以很好地兼容那些使用NUL作为字符串结尾的
编程语言。
